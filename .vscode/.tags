!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
0	.vscode/settings.json	/^        ".\/headers"$/;"	kind:string	line:4	array:verilog.linting.iverilog.includePath
A	datapath/EX/ALU.sv	/^    input [31:0]A,$/;"	kind:port	line:2	module:ALU
A	datapath/EX/MDProc.sv	/^    input [31:0]A,$/;"	kind:port	line:4	module:MDPROC
A	datapath/ID/EXT.sv	/^    input[15:0] A,$/;"	kind:port	line:2	module:EXT
A	devices/7seg.sv	/^    input A,$/;"	kind:port	line:25	module:seg7
ALU	datapath/EX/ALU.sv	/^module ALU($/;"	kind:module	line:1
ALUB	datapath/EX/EX.sv	/^    wire[31:0]f_rd1,f_rd2,ALUB,ALUC,EXout,MDHI,MDLO;  $/;"	kind:net	line:27	module:EX
ALUC	datapath/EX/EX.sv	/^    wire[31:0]f_rd1,f_rd2,ALUB,ALUC,EXout,MDHI,MDLO;  $/;"	kind:net	line:27	module:EX
B	datapath/EX/ALU.sv	/^    input [31:0]B,$/;"	kind:port	line:3	module:ALU
B	datapath/EX/MDProc.sv	/^    input [31:0]B,$/;"	kind:port	line:5	module:MDPROC
B	datapath/ID/EXT.sv	/^    output [31:0]B$/;"	kind:port	line:5	module:EXT
BEEXT	datapath/MEM/BEEXT.sv	/^module BEEXT($/;"	kind:module	line:1
BRANCH	datapath/ID/BRANCH.sv	/^module BRANCH($/;"	kind:module	line:2
BRIDGE	devices/BRIDGE.sv	/^module BRIDGE ($/;"	kind:module	line:6
C	datapath/EX/ALU.sv	/^    output reg[31:0]C, $/;"	kind:port	line:6	module:ALU
CP0	datapath/CP0.sv	/^module CP0 ($/;"	kind:module	line:1
CP0_CTRL	datapath/CP0.sv	/^    input [1:0]CP0_CTRL,$/;"	kind:port	line:9	module:CP0
CP0_DATA	datapath/EX/EX.sv	/^    input [31:0] CP0_DATA,$/;"	kind:port	line:11	module:EX
CP0_DATA_from_EX	mips.sv	/^    wire [37:0]     CP0_DATA_from_EX;$/;"	kind:net	line:34	module:mips
CP0_EPC	datapath/ID/ID.sv	/^    input [31:2]CP0_EPC,$/;"	kind:port	line:13	module:ID
CTRL_STRCT_DEF_H	headers/CTRLStructDef.sv	/^`define CTRL_STRCT_DEF_H$/;"	kind:constant	line:2
Cause	datapath/CP0.sv	/^    wire [31:0]Cause;$/;"	kind:net	line:23	module:CP0
Controller	control/Controller.sv	/^module Controller ($/;"	kind:module	line:2
D	devices/7seg.sv	/^    input [31:0]D,$/;"	kind:port	line:24	module:seg7
D	devices/counter.sv	/^    input[31:0] D,$/;"	kind:port	line:2	module:counter
D	devices/screenBoard.sv	/^    input[31:0] D,$/;"	kind:port	line:2	module:screenBoard
DEV0_LO_ADDR	devices/BRIDGE.sv	/^`define DEV0_LO_ADDR 7$/;"	kind:constant	line:2
DEV0_RD	devices/BRIDGE.sv	/^    wire[31:0]  DEV0_RD,DEV1_RD,DEV2_RD,DEV_WD;$/;"	kind:net	line:29	module:BRIDGE
DEV1_LO_ADDR	devices/BRIDGE.sv	/^`define DEV1_LO_ADDR 7$/;"	kind:constant	line:3
DEV1_RD	devices/BRIDGE.sv	/^    wire[31:0]  DEV0_RD,DEV1_RD,DEV2_RD,DEV_WD;$/;"	kind:net	line:29	module:BRIDGE
DEV2_LO_ADDR	devices/BRIDGE.sv	/^`define DEV2_LO_ADDR 7$/;"	kind:constant	line:4
DEV2_RD	devices/BRIDGE.sv	/^    wire[31:0]  DEV0_RD,DEV1_RD,DEV2_RD,DEV_WD;$/;"	kind:net	line:29	module:BRIDGE
DEV_Addr	devices/BRIDGE.sv	/^    wire[`DevMaxLoAddr:2]   DEV_Addr;$/;"	kind:net	line:28	module:BRIDGE
DEV_WD	devices/BRIDGE.sv	/^    wire[31:0]  DEV0_RD,DEV1_RD,DEV2_RD,DEV_WD;$/;"	kind:net	line:29	module:BRIDGE
DIn	datapath/CP0.sv	/^    wire [31:0]DIn;$/;"	kind:net	line:13	module:CP0
DREXT	datapath/WB/DREXT.sv	/^module DREXT($/;"	kind:module	line:1
DevMaxLoAddr	devices/BRIDGE.sv	/^`define DevMaxLoAddr 7$/;"	kind:constant	line:1
Dout	datapath/MEM/MEM.sv	/^    wire[31:0]Dout;$/;"	kind:net	line:26	module:MEM
Dout	datapath/WB/WB.sv	/^    wire[31:0]EXout,Dout; $/;"	kind:net	line:9	module:WB
Dout	devices/7seg.sv	/^    output [31:0]Dout,$/;"	kind:port	line:29	module:seg7
EPC	datapath/ID/npc.sv	/^    input wire[31:2] EPC,$/;"	kind:port	line:10	module:jpc
EX	datapath/EX/EX.sv	/^module EX ($/;"	kind:module	line:1
EXL	datapath/CP0.sv	/^    reg EXL,IE;$/;"	kind:register	line:19	module:CP0
EXT	datapath/ID/EXT.sv	/^module EXT ($/;"	kind:module	line:1
EXTB	datapath/EX/EX.sv	/^    wire [31:0]instr,rd1,rd2,EXTB;$/;"	kind:net	line:24	module:EX
EXTB	datapath/ID/ID.sv	/^    wire [31:0]rd1,rd2,EXTB;$/;"	kind:net	line:30	module:ID
EXT_Dout	datapath/WB/WB.sv	/^    wire[31:0] EXT_Dout;$/;"	kind:net	line:12	module:WB
EX_CTRL	datapath/EX/EX.sv	/^    input [15:0]EX_CTRL,$/;"	kind:port	line:5	module:EX
EX_CTRL_from_ID	mips.sv	/^    wire [15:0]     EX_CTRL_from_ID;$/;"	kind:net	line:24	module:mips
EX_DATA	datapath/CP0.sv	/^    input [37:0] EX_DATA,$/;"	kind:port	line:7	module:CP0
EX_DATA	datapath/EX/EX.sv	/^    input [157:0]EX_DATA,$/;"	kind:port	line:8	module:EX
EX_DATA_from_CP0	mips.sv	/^    wire [31:0] 	EX_DATA_from_CP0;$/;"	kind:net	line:40	module:mips
EX_DATA_from_ID	mips.sv	/^     wire [157:0] 	EX_DATA_from_ID;$/;"	kind:net	line:23	module:mips
EX_FLUSH	control/Controller.sv	/^    output EX_FLUSH, $/;"	kind:port	line:13	module:Controller
EX_FLUSH	datapath/EX/EX.sv	/^    input EX_FLUSH,$/;"	kind:port	line:4	module:EX
EX_instr	datapath/IF/IF.sv	/^    wire [25:0]EX_instr;$/;"	kind:net	line:13	module:IF
EX_memToReg	control/HazardDetect.sv	/^    input EX_memToReg,$/;"	kind:port	line:7	module:HazardDetect
EX_regWrite	control/HazardDetect.sv	/^    input EX_regWrite,$/;"	kind:port	line:8	module:HazardDetect
EX_rw	control/HazardDetect.sv	/^    input [4:0]EX_rw,$/;"	kind:port	line:4	module:HazardDetect
EX_rw_from_EX	mips.sv	/^    wire [4:0]      EX_rw_from_EX;$/;"	kind:net	line:33	module:mips
EXout	datapath/EX/EX.sv	/^    wire[31:0]f_rd1,f_rd2,ALUB,ALUC,EXout,MDHI,MDLO;  $/;"	kind:net	line:27	module:EX
EXout	datapath/MEM/MEM.sv	/^    wire[31:0]EXout,rd2,MEMout,preEXout,prerd2; $/;"	kind:net	line:20	module:MEM
EXout	datapath/WB/WB.sv	/^    wire[31:0]EXout,Dout; $/;"	kind:net	line:9	module:WB
ExceptionHandlerAddr	datapath/ID/npc.sv	/^`define ExceptionHandlerAddr 30'h00001060$/;"	kind:constant	line:1
F	datapath/EX/ALU.sv	/^    input [3:0]F,$/;"	kind:port	line:5	module:ALU
F	datapath/EX/MDProc.sv	/^    input [2:0] F,$/;"	kind:port	line:6	module:MDPROC
FORWARD	control/FORWARD.sv	/^module FORWARD ($/;"	kind:module	line:2
GPR	datapath/ID/GPR.sv	/^module GPR($/;"	kind:module	line:1
HWInt	datapath/CP0.sv	/^    input [7:2 ]HWInt,$/;"	kind:port	line:4	module:CP0
HWInt	devices/BRIDGE.sv	/^    output [7:2]HWInt,$/;"	kind:port	line:13	module:BRIDGE
HWInt	mips.sv	/^    input [7:2]HWInt,$/;"	kind:port	line:5	module:mips
HWInt	top.sv	/^    wire [7:2]HWInt;$/;"	kind:net	line:34	module:top
HazardDetect	control/HazardDetect.sv	/^module HazardDetect ($/;"	kind:module	line:1
ID	datapath/ID/ID.sv	/^module ID ($/;"	kind:module	line:2
ID_DATA	datapath/ID/ID.sv	/^    input [61:0]ID_DATA,$/;"	kind:port	line:10	module:ID
ID_DATA_from_IF	mips.sv	/^    wire [61:0] 	ID_DATA_from_IF;$/;"	kind:net	line:13	module:mips
ID_EPC_from_CP0	mips.sv	/^    wire [31:2] 	ID_EPC_from_CP0;$/;"	kind:net	line:39	module:mips
ID_FLUSH	control/Controller.sv	/^    output ID_FLUSH,$/;"	kind:port	line:12	module:Controller
ID_FLUSH	datapath/ID/ID.sv	/^    input ID_FLUSH,$/;"	kind:port	line:5	module:ID
ID_PCP1	datapath/CP0.sv	/^    input [31:2] ID_PCP1,$/;"	kind:port	line:5	module:CP0
ID_PCP1	datapath/IF/IF.sv	/^    wire [31:2] ID_PCP1;$/;"	kind:net	line:53	module:IF
ID_PCP1	mips.sv	/^    wire [31:2] ID_PCP1;$/;"	kind:net	line:20	module:mips
ID_instr	datapath/IF/IF.sv	/^    reg [31:0] ID_instr; $/;"	kind:register	line:31	module:IF
ID_instr	mips.sv	/^    wire [31:0] ID_instr;$/;"	kind:net	line:21	module:mips
ID_rs	control/HazardDetect.sv	/^    input [4:0]ID_rs,$/;"	kind:port	line:2	module:HazardDetect
ID_rt	control/HazardDetect.sv	/^    input [4:0]ID_rt,$/;"	kind:port	line:3	module:HazardDetect
ID_uncertainJump	control/HazardDetect.sv	/^    input ID_uncertainJump,$/;"	kind:port	line:6	module:HazardDetect
ID_uncertainJump	mips.sv	/^    wire ID_uncertainJump;$/;"	kind:net	line:29	module:mips
IE	datapath/CP0.sv	/^    reg EXL,IE;$/;"	kind:register	line:19	module:CP0
IF	datapath/IF/IF.sv	/^module IF ($/;"	kind:module	line:1
IF_CTRL	datapath/IF/IF.sv	/^    input IF_CTRL,$/;"	kind:port	line:7	module:IF
IF_FLUSH	control/Controller.sv	/^    output IF_FLUSH,$/;"	kind:port	line:11	module:Controller
IF_FLUSH	datapath/IF/IF.sv	/^    input IF_FLUSH,$/;"	kind:port	line:6	module:IF
IF_PC	datapath/IF/IF.sv	/^    wire[31:2] IF_PC,NPC;$/;"	kind:net	line:14	module:IF
IF_instr	datapath/IF/IF.sv	/^    wire[31:0] IF_instr;$/;"	kind:net	line:15	module:IF
IM	datapath/CP0.sv	/^    reg[15:10] IM;$/;"	kind:register	line:18	module:CP0
IM	datapath/IF/IM.sv	/^module IM($/;"	kind:module	line:1
INT	devices/counter.sv	/^    output INT$/;"	kind:port	line:5	module:counter
IOWrite	datapath/MEM/MEM.sv	/^    output IOWrite,$/;"	kind:port	line:10	module:MEM
IOWrite	mips.sv	/^    output IOWrite$/;"	kind:port	line:10	module:mips
IOWrite	top.sv	/^    wire IOWrite;$/;"	kind:net	line:35	module:top
IntReq	control/Controller.sv	/^    input IntReq,$/;"	kind:port	line:10	module:Controller
IntReq	datapath/CP0.sv	/^    output IntReq$/;"	kind:port	line:10	module:CP0
IntReq	mips.sv	/^    wire        	IntReq;$/;"	kind:net	line:43	module:mips
JPC	datapath/ID/npc.sv	/^    output wire[31:2] JPC);$/;"	kind:port	line:14	module:jpc
JPC	datapath/IF/IF.sv	/^    input [31:2]JPC,$/;"	kind:port	line:5	module:IF
JPC	mips.sv	/^    wire [31:2]     JPC;$/;"	kind:net	line:27	module:mips
MDFunc	control/Controller.sv	/^    wire [2:0]branchType,MDFunc;$/;"	kind:net	line:24	module:Controller
MDFunc	datapath/EX/EX.sv	/^    wire [2:0]MDFunc;$/;"	kind:net	line:20	module:EX
MDHI	datapath/EX/EX.sv	/^    wire[31:0]f_rd1,f_rd2,ALUB,ALUC,EXout,MDHI,MDLO;  $/;"	kind:net	line:27	module:EX
MDLO	datapath/EX/EX.sv	/^    wire[31:0]f_rd1,f_rd2,ALUB,ALUC,EXout,MDHI,MDLO;  $/;"	kind:net	line:27	module:EX
MDPROC	datapath/EX/MDProc.sv	/^module MDPROC ($/;"	kind:module	line:1
MEM	datapath/MEM/MEM.sv	/^module MEM ($/;"	kind:module	line:1
MEM_BACK	control/FORWARD.sv	/^    input [37:0]MEM_BACK,$/;"	kind:port	line:3	module:FORWARD
MEM_BACK	datapath/EX/EX.sv	/^    input [37:0] MEM_BACK,$/;"	kind:port	line:10	module:EX
MEM_BACK	datapath/ID/ID.sv	/^    input [37:0]MEM_BACK,$/;"	kind:port	line:12	module:ID
MEM_BACK_from_MEM	mips.sv	/^    wire [37:0]     MEM_BACK_from_MEM;$/;"	kind:net	line:37	module:mips
MEM_CTRL	datapath/EX/EX.sv	/^    input MEM_CTRL,$/;"	kind:port	line:6	module:EX
MEM_CTRL	datapath/MEM/MEM.sv	/^    input MEM_CTRL,$/;"	kind:port	line:5	module:MEM
MEM_CTRL_from_EX	mips.sv	/^    wire         	MEM_CTRL_from_EX;$/;"	kind:net	line:30	module:mips
MEM_CTRL_from_ID	mips.sv	/^    wire         	MEM_CTRL_from_ID;$/;"	kind:net	line:25	module:mips
MEM_DATA	datapath/MEM/MEM.sv	/^    input [68:0]MEM_DATA,$/;"	kind:port	line:13	module:MEM
MEM_DATA_from_EX	mips.sv	/^    wire [68:0] 	MEM_DATA_from_EX;$/;"	kind:net	line:32	module:mips
MEM_FLUSH	control/Controller.sv	/^    output MEM_FLUSH, $/;"	kind:port	line:14	module:Controller
MEM_FLUSH	datapath/MEM/MEM.sv	/^    input MEM_FLUSH,$/;"	kind:port	line:4	module:MEM
MEM_Wd	control/FORWARD.sv	/^    wire [31:0] WB_Wd,MEM_Wd;$/;"	kind:net	line:14	module:FORWARD
MEM_memToReg	control/HazardDetect.sv	/^    input MEM_memToReg,$/;"	kind:port	line:9	module:HazardDetect
MEM_rd	control/FORWARD.sv	/^    wire [4:0] WB_rd,MEM_rd;$/;"	kind:net	line:15	module:FORWARD
MEM_rw	control/HazardDetect.sv	/^    input [4:0]MEM_rw,$/;"	kind:port	line:5	module:HazardDetect
MEMout	datapath/MEM/MEM.sv	/^    wire[31:0]EXout,rd2,MEMout,preEXout,prerd2; $/;"	kind:net	line:20	module:MEM
NPC	datapath/IF/IF.sv	/^    wire[31:2] IF_PC,NPC;$/;"	kind:net	line:14	module:IF
NPC	datapath/IF/pc.sv	/^    input wire[31:2] NPC,$/;"	kind:port	line:3	module:pc
NPCFromEPC	datapath/ID/npc.sv	/^    input NPCFromEPC,$/;"	kind:port	line:8	module:jpc
NPCFromGPR	datapath/ID/npc.sv	/^    input NPCFromGPR,$/;"	kind:port	line:7	module:jpc
O_HI	datapath/EX/MDProc.sv	/^    output [31:0]O_HI,$/;"	kind:port	line:7	module:MDPROC
O_LO	datapath/EX/MDProc.sv	/^    output [31:0]O_LO$/;"	kind:port	line:8	module:MDPROC
PC	datapath/ID/npc.sv	/^    input wire[31:2] PC,$/;"	kind:port	line:4	module:jpc
PC	datapath/IF/pc.sv	/^    output reg[31:2] PC);$/;"	kind:port	line:7	module:pc
PCP1	datapath/EX/EX.sv	/^    wire  [31:2]PCP1;$/;"	kind:net	line:23	module:EX
PCP1	datapath/ID/ID.sv	/^    wire [31:2] PCP1;$/;"	kind:net	line:23	module:ID
PCWrite	datapath/IF/pc.sv	/^    input PCWrite,$/;"	kind:port	line:6	module:pc
PrAddr	datapath/MEM/MEM.sv	/^    output [31:2]PrAddr,$/;"	kind:port	line:7	module:MEM
PrAddr	devices/BRIDGE.sv	/^    reg[31:2] PrAddr;$/;"	kind:register	line:18	module:BRIDGE
PrAddr	mips.sv	/^    output [31:2]PrAddr,$/;"	kind:port	line:6	module:mips
PrAddr	top.sv	/^    wire [31:2]PrAddr;$/;"	kind:net	line:31	module:top
PrAddrWire	devices/BRIDGE.sv	/^    input[31:2]      PrAddrWire,$/;"	kind:port	line:8	module:BRIDGE
PrBE	datapath/MEM/MEM.sv	/^    output [3:0]PrBE,$/;"	kind:port	line:9	module:MEM
PrBE	devices/BRIDGE.sv	/^    reg[3:0] PrBE;$/;"	kind:register	line:20	module:BRIDGE
PrBE	mips.sv	/^    output [3:0]PrBE,$/;"	kind:port	line:9	module:mips
PrBE	top.sv	/^    wire [3:0]PrBE;$/;"	kind:net	line:33	module:top
PrBEWire	devices/BRIDGE.sv	/^    input[3:0]       PrBEWire,$/;"	kind:port	line:10	module:BRIDGE
PrID	datapath/CP0.sv	/^    reg[31:0] PrID;$/;"	kind:register	line:21	module:CP0
PrRD	datapath/MEM/MEM.sv	/^    input [31:0]PrRD,$/;"	kind:port	line:6	module:MEM
PrRD	devices/BRIDGE.sv	/^    output[31:0]     PrRD,$/;"	kind:port	line:12	module:BRIDGE
PrRD	mips.sv	/^    input [31:0]PrRD,$/;"	kind:port	line:7	module:mips
PrRD	top.sv	/^    wire [31:0]PrRD,PrWD;$/;"	kind:net	line:32	module:top
PrWD	datapath/MEM/MEM.sv	/^    output [31:0]PrWD,$/;"	kind:port	line:8	module:MEM
PrWD	devices/BRIDGE.sv	/^    reg[31:0] PrWD;$/;"	kind:register	line:19	module:BRIDGE
PrWD	mips.sv	/^    output [31:0]PrWD,$/;"	kind:port	line:8	module:mips
PrWD	top.sv	/^    wire [31:0]PrRD,PrWD;$/;"	kind:net	line:32	module:top
PrWDWire	devices/BRIDGE.sv	/^    input[31:0]      PrWDWire,$/;"	kind:port	line:9	module:BRIDGE
QkSort	sample_codes/qsort.c	/^void QkSort(int *arr, int left, int right){$/;"	kind:function	line:8	typeref:typename:void
SR	datapath/CP0.sv	/^    wire [31:0]SR;$/;"	kind:net	line:22	module:CP0
START_ADDR	datapath/IF/pc.sv	/^`define START_ADDR 30'h0000BFF$/;"	kind:constant	line:1
Sel	datapath/CP0.sv	/^    wire [4:0] Sel;$/;"	kind:net	line:14	module:CP0
USE_MEM_BACK	control/FORWARD.sv	/^    input USE_MEM_BACK,$/;"	kind:port	line:5	module:FORWARD
USE_WB_BACK	control/FORWARD.sv	/^    input USE_WB_BACK,$/;"	kind:port	line:6	module:FORWARD
WB	datapath/WB/WB.sv	/^module WB ($/;"	kind:module	line:1
WB_BACK	control/FORWARD.sv	/^    input [37:0]WB_BACK,$/;"	kind:port	line:4	module:FORWARD
WB_BACK	datapath/EX/EX.sv	/^    input [37:0] WB_BACK,$/;"	kind:port	line:9	module:EX
WB_BACK	datapath/ID/ID.sv	/^    input [37:0]WB_BACK,$/;"	kind:port	line:11	module:ID
WB_BACK_from_WB	mips.sv	/^    wire[37:0] WB_BACK_from_WB;$/;"	kind:net	line:38	module:mips
WB_CTRL	datapath/EX/EX.sv	/^    input [4:0]WB_CTRL,$/;"	kind:port	line:7	module:EX
WB_CTRL	datapath/MEM/MEM.sv	/^    input [4:0]WB_CTRL,$/;"	kind:port	line:11	module:MEM
WB_CTRL	datapath/WB/WB.sv	/^    input [4:0]WB_CTRL,$/;"	kind:port	line:4	module:WB
WB_CTRL_from_EX	mips.sv	/^    wire [4:0]   	WB_CTRL_from_EX;$/;"	kind:net	line:31	module:mips
WB_CTRL_from_ID	mips.sv	/^    wire [4:0]   	WB_CTRL_from_ID;$/;"	kind:net	line:26	module:mips
WB_CTRL_from_MEM	mips.sv	/^    wire [4:0]   	WB_CTRL_from_MEM;$/;"	kind:net	line:35	module:mips
WB_DATA	datapath/WB/WB.sv	/^    input [68:0]WB_DATA, $/;"	kind:port	line:5	module:WB
WB_DATA_from_MEM	mips.sv	/^    wire [68:0] 	WB_DATA_from_MEM;$/;"	kind:net	line:36	module:mips
WB_Wd	control/FORWARD.sv	/^    wire [31:0] WB_Wd,MEM_Wd;$/;"	kind:net	line:14	module:FORWARD
WB_Wd	datapath/ID/ID.sv	/^    wire [31:0] WB_Wd;$/;"	kind:net	line:26	module:ID
WB_Wd	datapath/WB/WB.sv	/^    wire [31:0]WB_Wd;$/;"	kind:net	line:21	module:WB
WB_rd	control/FORWARD.sv	/^    wire [4:0] WB_rd,MEM_rd;$/;"	kind:net	line:15	module:FORWARD
WB_rw	datapath/ID/ID.sv	/^    wire [4:0] WB_rw;$/;"	kind:net	line:27	module:ID
WE	devices/counter.sv	/^    input WE,$/;"	kind:port	line:3	module:counter
WE	devices/screenBoard.sv	/^    input WE,$/;"	kind:port	line:3	module:screenBoard
Wd	datapath/ID/GPR.sv	/^    input [31:0] Wd,$/;"	kind:port	line:8	module:GPR
WeCPU	devices/BRIDGE.sv	/^    reg WeCPU;$/;"	kind:register	line:21	module:BRIDGE
WeCPUWire	devices/BRIDGE.sv	/^    input           WeCPUWire,$/;"	kind:port	line:11	module:BRIDGE
WeDEV	devices/BRIDGE.sv	/^    wire[3:0]   WeDEV;$/;"	kind:net	line:30	module:BRIDGE
Wen	datapath/CP0.sv	/^    wire Wen;$/;"	kind:net	line:15	module:CP0
_byte	datapath/WB/DREXT.sv	/^    wire [7:0] _byte;$/;"	kind:net	line:8	module:DREXT
_time	tb.sv	/^    reg [31:0] _time=0;$/;"	kind:register	line:5	module:tb
addr	datapath/IF/IM.sv	/^    input [15:2]addr,$/;"	kind:port	line:4	module:IM
addra	sim/sim_dm_ram.sv	/^    input[13:2]addra,$/;"	kind:port	line:2	module:dm_ram
addra	sim/sim_im_rom.sv	/^    input [12:2]addra,$/;"	kind:port	line:3	module:im_rom
aluop	control/Controller.sv	/^    wire [3:0]aluop;$/;"	kind:net	line:23	module:Controller
aluop	datapath/EX/EX.sv	/^    wire [3:0]aluop;$/;"	kind:net	line:19	module:EX
be	datapath/MEM/BEEXT.sv	/^    output[3:0] be$/;"	kind:port	line:5	module:BEEXT
be	datapath/MEM/MEM.sv	/^    wire[3:0] be;$/;"	kind:net	line:27	module:MEM
be	devices/7seg.sv	/^    input [3:0]be,$/;"	kind:port	line:26	module:seg7
branchAvail	datapath/ID/BRANCH.sv	/^    output branchAvail$/;"	kind:port	line:6	module:BRANCH
branchAvail	datapath/ID/ID.sv	/^    wire       	branchAvail;$/;"	kind:net	line:67	module:ID
branchAvail	datapath/ID/npc.sv	/^    input branchAvail,$/;"	kind:port	line:5	module:jpc
branchType	control/Controller.sv	/^    wire [2:0]branchType,MDFunc;$/;"	kind:net	line:24	module:Controller
branchType	datapath/ID/BRANCH.sv	/^    input [2:0] branchType,$/;"	kind:port	line:5	module:BRANCH
branchType	datapath/ID/ID.sv	/^    wire [2:0]branchType;$/;"	kind:net	line:21	module:ID
ce	datapath/IF/IM.sv	/^    input ce,$/;"	kind:port	line:3	module:IM
clk	control/Controller.sv	/^    input clk,$/;"	kind:port	line:3	module:Controller
clk	datapath/CP0.sv	/^    input      clk,$/;"	kind:port	line:2	module:CP0
clk	datapath/EX/EX.sv	/^    input      clk,$/;"	kind:port	line:2	module:EX
clk	datapath/EX/MDProc.sv	/^    input      clk,$/;"	kind:port	line:2	module:MDPROC
clk	datapath/ID/GPR.sv	/^    input clk,$/;"	kind:port	line:2	module:GPR
clk	datapath/ID/ID.sv	/^    input      clk,$/;"	kind:port	line:3	module:ID
clk	datapath/IF/IF.sv	/^    input clk,$/;"	kind:port	line:2	module:IF
clk	datapath/IF/IM.sv	/^    input clk,$/;"	kind:port	line:2	module:IM
clk	datapath/IF/pc.sv	/^    input clk,$/;"	kind:port	line:4	module:pc
clk	datapath/MEM/MEM.sv	/^    input      clk,$/;"	kind:port	line:2	module:MEM
clk	datapath/WB/WB.sv	/^    input      clk,$/;"	kind:port	line:2	module:WB
clk	devices/7seg.sv	/^    input clk,$/;"	kind:port	line:27	module:seg7
clk	devices/BRIDGE.sv	/^    input clk,$/;"	kind:port	line:7	module:BRIDGE
clk	devices/counter.sv	/^    input clk,$/;"	kind:port	line:4	module:counter
clk	devices/screenBoard.sv	/^    input clk,$/;"	kind:port	line:4	module:screenBoard
clk	mips.sv	/^    input clk,$/;"	kind:port	line:3	module:mips
clk	tb.sv	/^	reg clk;$/;"	kind:register	line:3	module:tb
clk	top.sv	/^    input clk,$/;"	kind:port	line:24	module:top
clka	sim/sim_dm_ram.sv	/^    input clka,$/;"	kind:port	line:5	module:dm_ram
clka	sim/sim_im_rom.sv	/^    input      clka,$/;"	kind:port	line:2	module:im_rom
cnt	devices/7seg.sv	/^    reg[18:0  ] cnt=0;$/;"	kind:register	line:34	module:seg7
cnt	devices/counter.sv	/^    reg[31:0] cnt;$/;"	kind:register	line:7	module:counter
counter	devices/counter.sv	/^module counter ($/;"	kind:module	line:1
ctags-companion.command	.vscode/settings.json	/^    "ctags-companion.command": "ctags -R --fields=+nKz -f .vscode\/.tags --langmap=SystemVerilog/;"	kind:string	line:6
delay_1K	sample_codes/segtest.c	/^void delay_1K(){$/;"	kind:function	line:18	typeref:typename:void
delay_ms	sample_codes/segtest.c	/^void delay_ms(int i){$/;"	kind:function	line:24	typeref:typename:void
dina	sim/sim_dm_ram.sv	/^    input [31:0] dina,$/;"	kind:port	line:6	module:dm_ram
dina	sim/sim_im_rom.sv	/^    input [31:0]dina,$/;"	kind:port	line:5	module:im_rom
dm_ram	sim/sim_dm_ram.sv	/^module dm_ram ($/;"	kind:module	line:1
douta	sim/sim_dm_ram.sv	/^    output reg[31:0] douta$/;"	kind:port	line:7	module:dm_ram
douta	sim/sim_im_rom.sv	/^    output reg[31:0]douta);$/;"	kind:port	line:7	module:im_rom
ena	sim/sim_dm_ram.sv	/^    input ena,$/;"	kind:port	line:3	module:dm_ram
ena	sim/sim_im_rom.sv	/^    input ena,$/;"	kind:port	line:6	module:im_rom
exsign	datapath/ID/EXT.sv	/^    input exsign,$/;"	kind:port	line:4	module:EXT
exsign	datapath/WB/DREXT.sv	/^    input exsign,$/;"	kind:port	line:4	module:DREXT
extop	datapath/ID/EXT.sv	/^    input extop,$/;"	kind:port	line:3	module:EXT
f_rd1	control/FORWARD.sv	/^    output [31:0] f_rd1,$/;"	kind:port	line:11	module:FORWARD
f_rd1	datapath/EX/EX.sv	/^    wire[31:0]f_rd1,f_rd2,ALUB,ALUC,EXout,MDHI,MDLO;  $/;"	kind:net	line:27	module:EX
f_rd1	datapath/ID/ID.sv	/^    wire [31:0] 	f_rd1;$/;"	kind:net	line:51	module:ID
f_rd2	control/FORWARD.sv	/^    output [31:0] f_rd2$/;"	kind:port	line:12	module:FORWARD
f_rd2	datapath/EX/EX.sv	/^    wire[31:0]f_rd1,f_rd2,ALUB,ALUC,EXout,MDHI,MDLO;  $/;"	kind:net	line:27	module:EX
f_rd2	datapath/ID/ID.sv	/^    wire [31:0] 	f_rd2;$/;"	kind:net	line:52	module:ID
firstFetch	datapath/IF/IF.sv	/^    reg firstFetch;$/;"	kind:register	line:32	module:IF
fmatch	control/FORWARD.sv	/^`define fmatch(sel,val) ({32{sel}}&(val))$/;"	kind:constant	line:1
func	control/Controller.sv	/^    input [5:0]func,$/;"	kind:port	line:6	module:Controller
goExceptionHandler	datapath/ID/npc.sv	/^    input goExceptionHandler,$/;"	kind:port	line:9	module:jpc
half	datapath/WB/DREXT.sv	/^    wire [15:0] half;$/;"	kind:net	line:9	module:DREXT
hifo	datapath/EX/MDProc.sv	/^    reg [63:0]hifo;$/;"	kind:register	line:10	module:MDPROC
hwint_pend	datapath/CP0.sv	/^    reg[15:10] hwint_pend;$/;"	kind:register	line:20	module:CP0
i	datapath/ID/GPR.sv	/^    integer i;$/;"	kind:register	line:16	module:GPR
im_rom	sim/sim_im_rom.sv	/^module im_rom ($/;"	kind:module	line:1
in_data	datapath/WB/DREXT.sv	/^    input [31:0] in_data,$/;"	kind:port	line:6	module:DREXT
index	datapath/IF/IM.sv	/^    wire [10:0]index;$/;"	kind:net	line:6	module:IM
instr	datapath/EX/EX.sv	/^    wire [31:0]instr,rd1,rd2,EXTB;$/;"	kind:net	line:24	module:EX
instr	datapath/ID/ID.sv	/^    wire [31:0] instr;$/;"	kind:net	line:24	module:ID
instr_index	datapath/ID/npc.sv	/^    input wire[27:2] instr_index,$/;"	kind:port	line:12	module:jpc
instruct	datapath/IF/IM.sv	/^    output [31:0]instruct);$/;"	kind:port	line:5	module:IM
isByte	datapath/MEM/BEEXT.sv	/^    input isByte,$/;"	kind:port	line:2	module:BEEXT
isByte	datapath/WB/DREXT.sv	/^    input isByte,$/;"	kind:port	line:2	module:DREXT
isHalf	datapath/MEM/BEEXT.sv	/^    input isHalf,$/;"	kind:port	line:3	module:BEEXT
isHalf	datapath/WB/DREXT.sv	/^    input isHalf,$/;"	kind:port	line:3	module:DREXT
isSign	datapath/EX/MDProc.sv	/^    input isSign,$/;"	kind:port	line:3	module:MDPROC
jmp	datapath/ID/npc.sv	/^    input jmp,$/;"	kind:port	line:6	module:jpc
jpc	datapath/ID/npc.sv	/^module jpc($/;"	kind:module	line:3
jpcAvail	datapath/IF/IF.sv	/^    input jpcAvail,$/;"	kind:port	line:4	module:IF
jpcAvail	mips.sv	/^    wire jpcAvail;$/;"	kind:net	line:28	module:mips
led	tb.sv	/^    wire [7:0]led;$/;"	kind:net	line:6	module:tb
led	top.sv	/^    output [7:0]led,$/;"	kind:port	line:26	module:top
lightDig	devices/7seg.sv	/^    wire [2:0]lightDig; $/;"	kind:net	line:36	module:seg7
line	datapath/IF/pc.sv	/^    wire [29:0] line;$/;"	kind:net	line:11	module:pc
low_addr	datapath/MEM/BEEXT.sv	/^    input[1:0] low_addr,$/;"	kind:port	line:4	module:BEEXT
low_addr	datapath/WB/DREXT.sv	/^    input [1:0]low_addr,$/;"	kind:port	line:5	module:DREXT
main	sample_codes/qsort.c	/^int main()$/;"	kind:function	line:46	typeref:typename:int
main	sample_codes/segtest.c	/^int main()$/;"	kind:function	line:29	typeref:typename:int
match	datapath/ID/BRANCH.sv	/^`define match(type,val) ((branchType==type)&&(val))$/;"	kind:constant	line:1
mips	mips.sv	/^module mips ($/;"	kind:module	line:2
newSeg	devices/7seg.sv	/^    wire [7:0] newSeg,newSelect;$/;"	kind:net	line:38	module:seg7
newSelect	devices/7seg.sv	/^    wire [7:0] newSeg,newSelect;$/;"	kind:net	line:38	module:seg7
npcmatch	datapath/ID/npc.sv	/^`define npcmatch(sig,val) ({30{sig}}&(val))$/;"	kind:constant	line:2
o_CP0_DATA	datapath/EX/EX.sv	/^    output [37:0] o_CP0_DATA,$/;"	kind:port	line:16	module:EX
o_EX_CTRL	datapath/ID/ID.sv	/^    output reg[15:0]o_EX_CTRL,$/;"	kind:port	line:14	module:ID
o_EX_DATA	datapath/CP0.sv	/^    output [31:0] o_EX_DATA,$/;"	kind:port	line:8	module:CP0
o_EX_DATA	datapath/ID/ID.sv	/^    output reg[157:0] o_EX_DATA,$/;"	kind:port	line:17	module:ID
o_ID_DATA	datapath/IF/IF.sv	/^    output[61:0]o_ID_DATA$/;"	kind:port	line:8	module:IF
o_ID_EPC	datapath/CP0.sv	/^    output reg [31:2] o_ID_EPC,$/;"	kind:port	line:6	module:CP0
o_JPC	datapath/ID/ID.sv	/^    output [31:2]o_JPC,$/;"	kind:port	line:18	module:ID
o_MEM_BACK	datapath/MEM/MEM.sv	/^    output [37:0] o_MEM_BACK$/;"	kind:port	line:16	module:MEM
o_MEM_CTRL	datapath/EX/EX.sv	/^    output reg o_MEM_CTRL,$/;"	kind:port	line:12	module:EX
o_MEM_CTRL	datapath/ID/ID.sv	/^    output reg o_MEM_CTRL,$/;"	kind:port	line:15	module:ID
o_MEM_DATA	datapath/EX/EX.sv	/^    output reg [68:0]o_MEM_DATA,$/;"	kind:port	line:14	module:EX
o_WB_BACK	datapath/WB/WB.sv	/^    output [37:0]o_WB_BACK$/;"	kind:port	line:6	module:WB
o_WB_CTRL	datapath/EX/EX.sv	/^    output reg [4:0]o_WB_CTRL,$/;"	kind:port	line:13	module:EX
o_WB_CTRL	datapath/ID/ID.sv	/^    output reg [4:0] o_WB_CTRL,$/;"	kind:port	line:16	module:ID
o_WB_CTRL	datapath/MEM/MEM.sv	/^    output reg[4:0]o_WB_CTRL,$/;"	kind:port	line:14	module:MEM
o_WB_DATA	datapath/MEM/MEM.sv	/^    output reg[68:0]o_WB_DATA,$/;"	kind:port	line:15	module:MEM
o_jpcAvail	datapath/ID/ID.sv	/^    output o_jpcAvail$/;"	kind:port	line:19	module:ID
o_led	devices/BRIDGE.sv	/^    output [7:0]o_led,$/;"	kind:port	line:14	module:BRIDGE
o_pre_MEM_DATA	datapath/EX/EX.sv	/^    output [66:0]o_pre_MEM_DATA,$/;"	kind:port	line:15	module:EX
o_uncertainJump	control/Controller.sv	/^    output o_uncertainJump$/;"	kind:port	line:21	module:Controller
offset	datapath/ID/npc.sv	/^    input wire[17:2] offset,$/;"	kind:port	line:11	module:jpc
op	control/Controller.sv	/^    input [5:0]op,$/;"	kind:port	line:5	module:Controller
out_data	datapath/WB/DREXT.sv	/^    output [31:0] out_data); $/;"	kind:port	line:7	module:DREXT
pause	devices/7seg.sv	/^    reg[9:0] pause=0;$/;"	kind:register	line:35	module:seg7
pc	datapath/IF/pc.sv	/^module pc($/;"	kind:module	line:2
pipeline_stall	control/Controller.sv	/^    input pipeline_stall,$/;"	kind:port	line:9	module:Controller
pipeline_stall	mips.sv	/^     wire   	pipeline_stall;$/;"	kind:net	line:22	module:mips
preEXout	datapath/MEM/MEM.sv	/^    wire[31:0]EXout,rd2,MEMout,preEXout,prerd2; $/;"	kind:net	line:20	module:MEM
preMemAddr	datapath/EX/EX.sv	/^    wire[31:0]preMemAddr;$/;"	kind:net	line:34	module:EX
pre_MEM_DATA	datapath/MEM/MEM.sv	/^    input [66:0]pre_MEM_DATA,$/;"	kind:port	line:12	module:MEM
pre_MEM_DATA_from_EX	mips.sv	/^    wire [66:0] pre_MEM_DATA_from_EX;$/;"	kind:net	line:41	module:mips
prerd2	datapath/MEM/MEM.sv	/^    wire[31:0]EXout,rd2,MEMout,preEXout,prerd2; $/;"	kind:net	line:20	module:MEM
print	sample_codes/qsort.c	/^void print(int num){ $/;"	kind:function	line:5	typeref:typename:void
print	sample_codes/segtest.c	/^void print(int num){ $/;"	kind:function	line:6	typeref:typename:void
ram	devices/7seg.sv	/^    reg[31:0] ram[0:1];$/;"	kind:register	line:33	module:seg7
ram	sim/sim_dm_ram.sv	/^    reg[31:0] ram[0:3071]; $/;"	kind:register	line:9	module:dm_ram
rd1	control/FORWARD.sv	/^    input [31:0]rd1,$/;"	kind:port	line:9	module:FORWARD
rd1	datapath/EX/EX.sv	/^    wire [31:0]instr,rd1,rd2,EXTB;$/;"	kind:net	line:24	module:EX
rd1	datapath/ID/BRANCH.sv	/^    input [31:0]rd1,$/;"	kind:port	line:3	module:BRANCH
rd1	datapath/ID/GPR.sv	/^    output [31:0] rd1,$/;"	kind:port	line:9	module:GPR
rd1	datapath/ID/ID.sv	/^    wire [31:0]rd1,rd2,EXTB;$/;"	kind:net	line:30	module:ID
rd2	control/FORWARD.sv	/^    input [31:0]rd2,$/;"	kind:port	line:10	module:FORWARD
rd2	datapath/EX/EX.sv	/^    wire [31:0]instr,rd1,rd2,EXTB;$/;"	kind:net	line:24	module:EX
rd2	datapath/ID/BRANCH.sv	/^    input [31:0]rd2,$/;"	kind:port	line:4	module:BRANCH
rd2	datapath/ID/GPR.sv	/^    output [31:0] rd2);$/;"	kind:port	line:10	module:GPR
rd2	datapath/ID/ID.sv	/^    wire [31:0]rd1,rd2,EXTB;$/;"	kind:net	line:30	module:ID
rd2	datapath/MEM/MEM.sv	/^    wire[31:0]EXout,rd2,MEMout,preEXout,prerd2; $/;"	kind:net	line:20	module:MEM
regWrite	datapath/ID/GPR.sv	/^    input regWrite,$/;"	kind:port	line:4	module:GPR
reg_index	datapath/ID/npc.sv	/^    input wire[31:0] reg_index,$/;"	kind:port	line:13	module:jpc
reg_index	datapath/IF/IF.sv	/^    wire [31:0]reg_index;$/;"	kind:net	line:12	module:IF
register	datapath/ID/GPR.sv	/^    reg[31:0] register[0:31];$/;"	kind:register	line:12	module:GPR
reset	control/Controller.sv	/^    input reset,$/;"	kind:port	line:4	module:Controller
reset	datapath/ID/GPR.sv	/^    input reset,$/;"	kind:port	line:3	module:GPR
reset	datapath/IF/pc.sv	/^    input reset,$/;"	kind:port	line:5	module:pc
reset	tb.sv	/^    reg reset;$/;"	kind:register	line:4	module:tb
rom	sim/sim_im_rom.sv	/^    reg[31:0] rom[0:2047];$/;"	kind:register	line:8	module:im_rom
rs	control/Controller.sv	/^    input [4:0]rs,$/;"	kind:port	line:7	module:Controller
rs	control/FORWARD.sv	/^    input[4:0] rs,$/;"	kind:port	line:7	module:FORWARD
rs	datapath/ID/GPR.sv	/^    input [25:21]rs,$/;"	kind:port	line:5	module:GPR
rst	datapath/CP0.sv	/^    input      rst,$/;"	kind:port	line:3	module:CP0
rst	datapath/EX/EX.sv	/^    input      rst,$/;"	kind:port	line:3	module:EX
rst	datapath/ID/ID.sv	/^    input      rst,$/;"	kind:port	line:4	module:ID
rst	datapath/IF/IF.sv	/^    input rst,$/;"	kind:port	line:3	module:IF
rst	datapath/MEM/MEM.sv	/^    input      rst,$/;"	kind:port	line:3	module:MEM
rst	datapath/WB/WB.sv	/^    input      rst,$/;"	kind:port	line:3	module:WB
rst	mips.sv	/^    input rst,$/;"	kind:port	line:4	module:mips
rst	top.sv	/^    input rst,$/;"	kind:port	line:25	module:top
rt	control/Controller.sv	/^    input [4:0]rt,$/;"	kind:port	line:8	module:Controller
rt	control/FORWARD.sv	/^    input[4:0] rt,$/;"	kind:port	line:8	module:FORWARD
rt	datapath/ID/GPR.sv	/^    input [20:16]rt,$/;"	kind:port	line:6	module:GPR
rw	datapath/EX/EX.sv	/^    output[4:0] rw$/;"	kind:port	line:17	module:EX
rw	datapath/ID/GPR.sv	/^    input [15:11]rw,$/;"	kind:port	line:7	module:GPR
rw	datapath/MEM/MEM.sv	/^    wire[4:0]rw;$/;"	kind:net	line:21	module:MEM
rw	datapath/WB/WB.sv	/^    wire[4:0]rw;$/;"	kind:net	line:10	module:WB
sa	datapath/EX/ALU.sv	/^    input [4:0] sa,$/;"	kind:port	line:4	module:ALU
screenBoard	devices/screenBoard.sv	/^module screenBoard ($/;"	kind:module	line:1
seg	devices/7seg.sv	/^    output reg[7:0]seg,$/;"	kind:port	line:30	module:seg7
seg7	devices/7seg.sv	/^module seg7($/;"	kind:module	line:23
seg7Sb	sample_codes/segtest.c	/^void seg7Sb(uchar seg,int dig){$/;"	kind:function	line:11	typeref:typename:void
seg7Sw	sample_codes/segtest.c	/^void seg7Sw(uchar n3,uchar n2,uchar n1,uchar n0,int sel){$/;"	kind:function	line:14	typeref:typename:void
seg7_seg	devices/BRIDGE.sv	/^    output [7:0]seg7_seg,$/;"	kind:port	line:15	module:BRIDGE
seg7_seg	top.sv	/^    output [7:0]seg7_seg,$/;"	kind:port	line:27	module:top
seg7_seg1	top.sv	/^    output [7:0]seg7_seg1,$/;"	kind:port	line:28	module:top
seg7_select	devices/BRIDGE.sv	/^    output [7:0]seg7_select$/;"	kind:port	line:16	module:BRIDGE
seg7_select	top.sv	/^    output [7:0]seg7_select$/;"	kind:port	line:29	module:top
select	devices/7seg.sv	/^    output reg[7:0]select$/;"	kind:port	line:31	module:seg7
shift_bit	datapath/WB/DREXT.sv	/^    wire [4:0] shift_bit;$/;"	kind:net	line:10	module:DREXT
show	devices/screenBoard.sv	/^    output reg[31:0]show$/;"	kind:port	line:5	module:screenBoard
sll	datapath/EX/ALU.sv	/^    wire [31:0] sll,srl,sra,sllv,srlv,srav; $/;"	kind:net	line:9	module:ALU
sllv	datapath/EX/ALU.sv	/^    wire [31:0] sll,srl,sra,sllv,srlv,srav; $/;"	kind:net	line:9	module:ALU
sra	datapath/EX/ALU.sv	/^    wire [31:0] sll,srl,sra,sllv,srlv,srav; $/;"	kind:net	line:9	module:ALU
srav	datapath/EX/ALU.sv	/^    wire [31:0] sll,srl,sra,sllv,srlv,srav; $/;"	kind:net	line:9	module:ALU
srl	datapath/EX/ALU.sv	/^    wire [31:0] sll,srl,sra,sllv,srlv,srav; $/;"	kind:net	line:9	module:ALU
srlv	datapath/EX/ALU.sv	/^    wire [31:0] sll,srl,sra,sllv,srlv,srav; $/;"	kind:net	line:9	module:ALU
stall	control/HazardDetect.sv	/^    output stall$/;"	kind:port	line:10	module:HazardDetect
sum	datapath/EX/ALU.sv	/^    output [31:0]sum,$/;"	kind:port	line:7	module:ALU
tb	tb.sv	/^module tb();$/;"	kind:module	line:2
top	top.sv	/^module top($/;"	kind:module	line:23
type_CP0_CTRL	control/Controller.sv	/^    output type_CP0_CTRL CP0_CTRL,$/;"	kind:port	line:20	module:Controller
type_CP0_CTRL	headers/CTRLStructDef.sv	/^} type_CP0_CTRL;$/;"	kind:typedef	line:27
type_EX_CTRL	control/Controller.sv	/^    output type_EX_CTRL EX_CTRL,$/;"	kind:port	line:17	module:Controller
type_EX_CTRL	datapath/ID/ID.sv	/^    input type_EX_CTRL EX_CTRL,$/;"	kind:port	line:7	module:ID
type_EX_CTRL	headers/CTRLStructDef.sv	/^} type_EX_CTRL;$/;"	kind:typedef	line:18
type_ID_CTRL	control/Controller.sv	/^    output type_ID_CTRL ID_CTRL,$/;"	kind:port	line:16	module:Controller
type_ID_CTRL	datapath/ID/ID.sv	/^    input type_ID_CTRL ID_CTRL,$/;"	kind:port	line:6	module:ID
type_ID_CTRL	headers/CTRLStructDef.sv	/^} type_ID_CTRL;$/;"	kind:typedef	line:11
type_IF_CTRL	control/Controller.sv	/^    output type_IF_CTRL IF_CTRL,$/;"	kind:port	line:15	module:Controller
type_IF_CTRL	headers/CTRLStructDef.sv	/^} type_IF_CTRL;$/;"	kind:typedef	line:5
type_MEM_CTRL	control/Controller.sv	/^    output type_MEM_CTRL MEM_CTRL,$/;"	kind:port	line:18	module:Controller
type_MEM_CTRL	datapath/ID/ID.sv	/^    input type_MEM_CTRL MEM_CTRL,$/;"	kind:port	line:8	module:ID
type_MEM_CTRL	headers/CTRLStructDef.sv	/^} type_MEM_CTRL;$/;"	kind:typedef	line:21
type_WB_CTRL	control/Controller.sv	/^    output type_WB_CTRL WB_CTRL,$/;"	kind:port	line:19	module:Controller
type_WB_CTRL	datapath/ID/ID.sv	/^    input type_WB_CTRL WB_CTRL,$/;"	kind:port	line:9	module:ID
type_WB_CTRL	headers/CTRLStructDef.sv	/^} type_WB_CTRL;$/;"	kind:typedef	line:24
uchar	sample_codes/segtest.c	/^typedef unsigned char uchar;$/;"	kind:typedef	line:5	typeref:typename:unsigned char	file:
verilog.linting.iverilog.includePath	.vscode/settings.json	/^    "verilog.linting.iverilog.includePath": [$/;"	kind:array	line:3
we	devices/7seg.sv	/^    input we,$/;"	kind:port	line:28	module:seg7
wea	sim/sim_dm_ram.sv	/^    input [3:0]wea,$/;"	kind:port	line:4	module:dm_ram
wea	sim/sim_im_rom.sv	/^    input wea,$/;"	kind:port	line:4	module:im_rom
zero	datapath/EX/ALU.sv	/^    output zero); $/;"	kind:port	line:8	module:ALU
zero	datapath/EX/EX.sv	/^    wire zero;$/;"	kind:net	line:33	module:EX
